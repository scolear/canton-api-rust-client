/*
 * JSON Ledger API HTTP endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.3.0-SNAPSHOT
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// JsAssignedEvent : Records that a contract has been assigned, and it can be used on the target synchronizer.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JsAssignedEvent {
    /// The ID of the source synchronizer. Must be a valid synchronizer id. Required
    #[serde(rename = "source")]
    pub source: String,
    /// The ID of the target synchronizer. Must be a valid synchronizer id. Required
    #[serde(rename = "target")]
    pub target: String,
    /// The ID from the unassigned event. For correlation capabilities. For one contract the (unassign_id, source synchronizer) pair is unique. Must be a valid LedgerString (as described in ``value.proto``). Required
    #[serde(rename = "unassignId")]
    pub unassign_id: String,
    /// Party on whose behalf the assign command was executed. Empty if the assignment happened offline via the repair service. Must be a valid PartyIdString (as described in ``value.proto``). Optional
    #[serde(rename = "submitter")]
    pub submitter: String,
    /// Each corresponding assigned and unassigned event has the same reassignment_counter. This strictly increases with each unassign command for the same contract. Creation of the contract corresponds to reassignment_counter equals zero. Required
    #[serde(rename = "reassignmentCounter")]
    pub reassignment_counter: i64,
    #[serde(rename = "createdEvent")]
    pub created_event: Box<models::CreatedEvent>,
}

impl JsAssignedEvent {
    /// Records that a contract has been assigned, and it can be used on the target synchronizer.
    pub fn new(source: String, target: String, unassign_id: String, submitter: String, reassignment_counter: i64, created_event: models::CreatedEvent) -> JsAssignedEvent {
        JsAssignedEvent {
            source,
            target,
            unassign_id,
            submitter,
            reassignment_counter,
            created_event: Box::new(created_event),
        }
    }
}

