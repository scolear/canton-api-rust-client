/*
 * JSON Ledger API HTTP endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.3.0-SNAPSHOT
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EventFormat : A format for events which defines both which events should be included and what data should be computed and included for them.  Note that some of the filtering behavior depends on the `TransactionShape`, which is expected to be specified alongside usages of `EventFormat`.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventFormat {
    #[serde(rename = "filtersByParty")]
    pub filters_by_party: std::collections::HashMap<String, models::Filters>,
    #[serde(rename = "filtersForAnyParty", skip_serializing_if = "Option::is_none")]
    pub filters_for_any_party: Option<Box<models::Filters>>,
    /// If enabled, values served over the API will contain more information than strictly necessary to interpret the data. In particular, setting the verbose flag to true triggers the ledger to include labels for record fields. Optional
    #[serde(rename = "verbose")]
    pub verbose: bool,
}

impl EventFormat {
    /// A format for events which defines both which events should be included and what data should be computed and included for them.  Note that some of the filtering behavior depends on the `TransactionShape`, which is expected to be specified alongside usages of `EventFormat`.
    pub fn new(filters_by_party: std::collections::HashMap<String, models::Filters>, verbose: bool) -> EventFormat {
        EventFormat {
            filters_by_party,
            filters_for_any_party: None,
            verbose,
        }
    }
}

