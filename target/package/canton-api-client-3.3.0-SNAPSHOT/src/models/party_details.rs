/*
 * JSON Ledger API HTTP endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.3.0-SNAPSHOT
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PartyDetails {
    /// The stable unique identifier of a Daml party. Must be a valid PartyIdString (as described in ``value.proto``). Required
    #[serde(rename = "party")]
    pub party: String,
    /// true if party is hosted by the participant and the party shares the same identity provider as the user issuing the request. Optional
    #[serde(rename = "isLocal")]
    pub is_local: bool,
    #[serde(rename = "localMetadata", skip_serializing_if = "Option::is_none")]
    pub local_metadata: Option<Box<models::ObjectMeta>>,
    /// The id of the ``Identity Provider`` Optional, if not set, there could be 3 options:  1. the party is managed by the default identity provider. 2. party is not hosted by the participant. 3. party is hosted by the participant, but is outside of the user's identity provider.
    #[serde(rename = "identityProviderId")]
    pub identity_provider_id: String,
}

impl PartyDetails {
    pub fn new(party: String, is_local: bool, identity_provider_id: String) -> PartyDetails {
        PartyDetails {
            party,
            is_local,
            local_metadata: None,
            identity_provider_id,
        }
    }
}

